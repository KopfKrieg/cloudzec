#!/usr/bin/env python3
# -*- coding: utf-8 -*-


## Readme | http://cloudzec.org/
#

## Imports
import os
import sys
import time
# External
import libcloudzec


## Data
DEBUG = False


## Class
class BaseNotification():
    def __init__(self, notifyClass, name, icon=None):
        """
        Basic notification class

        @param notifyClass: The notification class (a little hack to make notifications optional using try: import notify2)
        @type notifyClass: class
        @param name: Application name
        @type name: str
        @param icon: Path to the icon to use within the application or None if not specified
        @type icon: str
        """
        # Setup
        self.name = name
        self.notification = notifyClass.Notification(self.name, 'Starting…')
        # Set Icon
        if icon is not None:
            try:
                from gi.repository import GdkPixbuf
                pb = GdkPixbuf.Pixbuf.new_from_file(icon)
                self.notification.set_icon_from_pixbuf(pb)
            except ImportError as e:
                print('Couldn\'t set icon: {}'.format(e))
        # Show message
        self.notification.update(self.name, 'Starting…')
        self.notification.show()


    def notify(self, message):
        """
        Update the notification message
        """
        self.notification.update(self.name, message)
        self.notification.show()        


    def close(self):
        """
        Closes the notification, do this before deleting the instanced object (e.g. before quitting the program)
        """
        self.notification.close()        


## Application
def showHelp():
    print('Possible arguments:\n')
    print('  help')
    print('   -> Shows this help\n')
    print('  init')
    print('   -> Initialise the local repository\n')
    print('  remoteinit')
    print('   -> Initialise the remote repository\n')
    print('  sync')
    print('   -> Full sync between remote and local repository\n')
    print('  daemon x')
    print('   -> Full sync between remote and local repository, „x“ is the time between syncs in minutes or 15 minutes if not given\n')
    print('  debug')
    print('   -> At this at the end of any other command to get debug-output')
    print('    -> cloudzec init debug')
    print('    -> cloudzec sync debug')
    print()


def debug(text):
    if DEBUG:
        print('Debug: {}'.format(text))


def main():
    ## Data
    global DEBUG
    ## Setup notify
    n = None
    try:
        import notify2
        name = 'CloudZec'
        # Find icon
        icon = None
        if os.path.exists('cloudzec_tray_48.png'):
            icon = 'cloudzec_tray_48.png'
        elif os.path.exists('/usr/share/icons/hicolor/48x48/apps/cloudzec.png'):
            icon = '/usr/share/icons/hicolor/48x48/apps/cloudzec.png'
        # Init and instance
        notify2.init(name)
        n = BaseNotification(notify2, name, icon)
    except ImportError as e:
        print('Couldn\'t find notify2-bindings')
    ## Arguments
    args = sys.argv[1:]
    # Help    
    if 'help' in args or len(args) == 0:
        showHelp()
        return
    # Debug
    if 'debug' in args:
        DEBUG = True
    # Everything else
    if args[0] == 'init':           # Local init
        c = libcloudzec.CloudZec(genMasterKey=True, debug=DEBUG)
    elif args[0] == 'remoteinit':   # Remote init
        c = libcloudzec.CloudZec(debug=DEBUG)
        c.remoteinit()
    elif args[0] == 'sync':         # Sync remote <-> local
        c = None
        if n is None:
            c = libcloudzec.CloudZec(debug=DEBUG)
        else:
            c = libcloudzec.CloudZec(notifyCallback=n.notify, debug=DEBUG)
        c.sync()
    elif args[0] == 'daemon':       # Sync remote <-> local in daemon mode
        t = 15
        if len(args) > 1:
            if args[1].isdigit():
                t = int(args[1])
        debug('Daemon mode with an interval of {} minute{}'.format(t, 's' if t = 1 else None))
        # Setup and run
        c = None
        if n is None:
            c = libcloudzec.CloudZec(debug=DEBUG)
        else:
            c = libcloudzec.CloudZec(notifyCallback=n.notify, debug=DEBUG)
        while True:
            c.sync()
            debug('Sleeping for {} minute{}'.format(t, 's' if t = 1 else None))
            time.sleep(t*60)
    else:
        print('Unknown argument „{}“'.format(args[0]))
        showHelp()
    ## Close Notifications
    if n is not None:
        n.close()
    ## Return
    return 0

if __name__ == '__main__':
    main()
