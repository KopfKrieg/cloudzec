#!/usr/bin/env python3
# -*- coding: utf-8 -*-


## Readme | http://cloudzec.org/
#

## Imports
import os
import time
import argparse
# External
import libcloudzec


## Class
class BaseNotification():
    def __init__(self, notifyClass, name, icon=None):
        """
        Basic notification class

        @param notifyClass: The notification class (a little hack to make notifications optional using try: import notify2)
        @type notifyClass: class
        @param name: Application name
        @type name: str
        @param icon: Path to the icon to use within the application or None if not specified
        @type icon: str
        """
        # Setup
        self.name = name
        self.notification = notifyClass.Notification(self.name, 'Starting…')
        # Set Icon
        if icon is not None:
            try:
                from gi.repository import GdkPixbuf
                pb = GdkPixbuf.Pixbuf.new_from_file(icon)
                self.notification.set_icon_from_pixbuf(pb)
            except ImportError as e:
                print('Couldn\'t set icon: {}'.format(e))
        # Show message
        self.notification.update(self.name, 'Starting…')
        self.notification.show()


    def notify(self, message):
        """
        Update the notification message
        """
        self.notification.update(self.name, message)
        self.notification.show()


    def close(self):
        """
        Closes the notification, do this before deleting the instanced object (e.g. before quitting the program)
        """
        self.notification.close()


## Application

def sync(cloud, notifications):
    try:
        cloud.sync()
    except Exception as e:
        if notifications is not None:
            notifications.notify('An error occurred: {}'.format(e))
            raise e


def setup_notify():
    n = None
    try:
        import notify2
        name = 'CloudZec'
        # Find icon
        icon = None
        if os.path.exists('/usr/share/icons/hicolor/48x48/apps/cloudzec.png'):
            icon = '/usr/share/icons/hicolor/48x48/apps/cloudzec.png'
        elif os.path.exists('icons/clodudzec_48.png'):
            icon = 'icons/cloudzec_48.png'
        # Init and instance
        notify2.init(name)
        n = BaseNotification(notify2, name, icon)
    except ImportError as e:
        print('Couldn\'t find notify2-bindings')
    return n


def main():
    ## Parser
    # Init parser
    parser = argparse.ArgumentParser()
    # Optional arguments
    parser.add_argument('-v', '--verbose', action='store_true', help='show debug messages')
    # Conflicting options
    parser_group = parser.add_mutually_exclusive_group() #required=True)
    parser_group.add_argument('-i', '--init', action='store_true', help='initialise the local repository')
    parser_group.add_argument('-r', '--remoteinit', action='store_true', help='initialise the remote repository')
    parser_group.add_argument('-s', '--sync', action='store_true', help='full sync between remote and local repository')
    parser_group.add_argument('-d', '--daemon', nargs='?', type=int, const=15, metavar='time', help='full sync between remote and local repository, [time] specifies the time between syncs in minutes (default 15 minutes)')
    # Get arguments
    args = parser.parse_args()
    # Debug?
    DEBUG = False
    if args.verbose:
        DEBUG = True
    # Everything else
    n = None
    if args.init:           # Init
        c = libcloudzec.CloudZec(genMasterKey=True, debug=DEBUG)
    elif args.remoteinit:   # Remoteinit
        c = libcloudzec.CloudZec(debug=DEBUG)
        c.remoteinit()
    elif args.sync:         # Sync
        n = setup_notify()
        c = None
        if n:
            c = libcloudzec.CloudZec(notifyCallback=n.notify, debug=DEBUG)
        else:
            c = libcloudzec.CloudZec(debug=DEBUG)
        sync(c, n)
    elif args.daemon:       # Daemon
        n = setup_notify()
        t = args.daemon
        print('Daemon mode with an interval of {} minute{}'.format(t, '' if t == 1 else 's'))
        c = None
        if n:
            c = libcloudzec.CloudZec(notifyCallback=n.notify, debug=DEBUG)
        else:
            c = libcloudzec.CloudZec(debug=DEBUG)
        while True:
            sync(c, n)
            print('Sleeping for {} minute{}'.format(t, '' if t == 1 else 's'))
            time.sleep(t*60)
    else:                   # Show help
        parser.print_help()
    ## Close Notifications
    if n is not None:
        n.close()
    ## Return
    return 0

if __name__ == '__main__':
    main()
